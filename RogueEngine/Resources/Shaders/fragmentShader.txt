#version 330 core
#define MAX_NUM_TOTAL_LIGHTS 100

out vec4 FragColor;

struct Light
{
  vec3 position;
  float radius;
  
  float ambient;
  float specular;
  
  vec4 tint;
};

in vec4 ourColor;
in vec2 TexCoord; 
in vec3 FragPos;

uniform sampler2D texture1;
uniform vec4 colourFilter = vec4(1.0, 1.0, 1.0, 1.0);

/* layout (std140) uniform Lights 
{
  Light light[MAX_NUM_TOTAL_LIGHTS];
  int numLights;
} */

uniform int numLights;
uniform Light light[MAX_NUM_TOTAL_LIGHTS];

vec4 CalcDirLight(Light light)
{
  float distance = length(light.position - FragPos);
  
  float normalizedDistance = distance / light.radius;
  float attenuation = clamp(1 - normalizedDistance, 0.0, 1.0);
  attenuation *= attenuation;
  
  vec4 ambient = light.ambient * texture(texture1, TexCoord);
  vec4 specular = light.specular * texture(texture1, TexCoord);
  
  ambient *= attenuation;
  specular *= attenuation;
  
  return (light.tint * (ambient + specular));
}

void main()
{
  vec4 result = texture(texture1, TexCoord);
  // loop through the number of lights
  for(int i = 0; i < numLights; ++i)
    result += CalcDirLight(light[i]) * texture(texture1, TexCoord);    
    
  FragColor = colourFilter * result;
}