#version 330 core

out vec4 FragColor;

struct Light
{
  vec3 position;
  
  float constant;
  float linear;
  float quadratic;
    
  float ambient;
  float diffuse;
  float specular;
};

#define TOTAL_LIGHTS 2

in vec4 ourColor;
in vec2 TexCoord; 
in vec3 FragPos;
in vec3 Normal; 

uniform sampler2D texture1;
uniform vec4 colourFilter = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec3 viewPos;

uniform Light light[TOTAL_LIGHTS];

vec4 CalcPointLight(Light light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
  vec3 norm = normalize(Normal);
  vec3 viewDir = normalize(viewPos - FragPos);
  
  vec4 result = texture(texture1, TexCoord).rgba;
  // loop through the number of lights
  for(int i = 0; i < TOTAL_LIGHTS; ++i)
    result += CalcPointLight(light[i], norm, FragPos, viewDir);    
    
  FragColor = colourFilter * result;
}

vec4 CalcPointLight(Light light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // combine results
    vec4 ambient = light.ambient * texture(texture1, TexCoord).rgba;
    vec4 diffuse = light.diffuse * diff * texture(texture1, TexCoord).rgba;
    vec4 specular = light.specular * spec * texture(texture1, TexCoord).rgba;
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    //return vec4(1.0, 1.0, 1.0, 1.0);
    return (ambient + diffuse + specular);
}
