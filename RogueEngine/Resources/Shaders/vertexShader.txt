#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec4 aColor;
layout (location = 2) in vec2 aTexCoord;
//layout (location = 3) in mat4 aInstanceMatrix;
// layout(location = 3) in vec2 uvScale;
// layout(location = 4) in vec2 uvOffset; 
    
out vec4 ourColor;
out vec2 TexCoord;
out vec3 FragPos;

layout (std140) uniform Matrices
{                            // base alignment  // aligned offset
  uniform mat4 projection;   // 16                 0
  uniform mat4 view;         // 16                 16
};

uniform mat4 transform;
uniform vec2 uvScale;
uniform vec2 uvOffset; 

void main()
{
  // FragPos = vec3(aInstanceMatrix * vec4(aPos, 1.0)); 
   FragPos = vec3(transform * vec4(aPos, 1.0)); 
  
  gl_Position =  projection * view * vec4(FragPos, 1.0);
  ourColor = aColor;
  
  TexCoord = vec2(aTexCoord.x, aTexCoord.y);
  
  // Calculate the scale of the texture coordinates
  TexCoord.x *= uvScale.x;
  TexCoord.y *= uvScale.y;

  // Offset current texture coordinates
  TexCoord += uvOffset; 
}